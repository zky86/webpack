!function(Q){var F={};function B(I){if(F[I])return F[I].exports;var U=F[I]={i:I,l:!1,exports:{}};return Q[I].call(U.exports,U,U.exports,B),U.l=!0,U.exports}B.m=Q,B.c=F,B.d=function(Q,F,I){B.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:I})},B.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=6)}([,,,,function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = window.$;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanF1ZXJ5MS44LmpzP2ZkNmEiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndpbmRvdyIsIiQiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUJDLE9BQU9DLENBQXhCIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy4kOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\n/**\r\n * Created by pocouser on 2015/11/18.\r\n */\n/**\r\n * 基础函数类\r\n * 所有外接函数要求驼峰写法\r\n * 所有内接函数要求小写写法\r\n * Created by Bosco on 2015/3/12.\r\n */\nvar $ = __webpack_require__(4);\nvar Browser = null;\nvar config = window.Config;\n\nexports.a = function () {};\n\n/**\r\n * 获取覆盖层对象\r\n * @param option 覆盖层样式\r\n * @returns {*|jQuery|HTMLElement}\r\n * @constructor\r\n */\nexports.GetOverDiv = function (option) {\n\n    option = (typeof option === "undefined" ? "undefined" : _typeof(option)) == "object" ? option : {};\n    var overbase = $(".overbase"),\n        use,\n        cc_style;\n    if (!option.style) {\n        cc_style = option;\n    } else {\n        cc_style = option.style;\n    }\n    if (overbase.size() < 1) {\n        overbase = $("<div class=\'overbase\'></div>");\n        $("body").append(overbase);\n\n        overbase.data("overuse", 1);\n\n        overbase.on("touchstart", function (e) {\n            exports.StopDefault(e);\n            option.click && option.click.call && option.click();\n        });\n\n        overbase.on("close", function () {\n            use = parseInt(overbase.data("overuse"));\n            use = !isNaN(use) ? use : 1;\n            use--;\n            overbase.data("overuse", use);\n            if (use < 1) {\n                overbase.remove();\n            }\n        });\n    } else {\n        use = parseInt(overbase.data("overuse"));\n        use = !isNaN(use) ? use : 1;\n        use++;\n        overbase.data("overuse", use);\n    }\n\n    var style = {\n        "width": "100%",\n        "height": "100%",\n        "position": "fixed",\n        "left": 0,\n        "top": 0,\n        "background": "#000",\n        "z-index": 999,\n        "display": "none",\n        "overflow": "hidden"\n    };\n\n    style = exports.MerageObj(style, cc_style);\n\n    overbase.css(style);\n\n    return overbase;\n};\n\nexports.AddLoading = function (o, option) {};\n\n/**\r\n * 获取loading\r\n * @param o\r\n * @returns {*|jQuery|HTMLElement}\r\n * @constructor\r\n * @param size 尺寸\r\n * @param option\r\n * unlock:不锁定默认动作\r\n * fix:是否fix\r\n */\nexports.GetLoading = function (o, size, option) {\n    option = option || {};\n\n    var baseele = o ? o : $("body");\n    var loading = baseele.children(".overloading");\n    if (loading.size() < 1) {\n        loading = $("<div class=\'overloading\'><i class=\'gp_icon\'></i></div>");\n        if (size == "small") {\n            loading.find("i").addClass("small");\n            loading.find("i").addClass("gp_icon_loading_white_20x20");\n        } else if (size == "little") {\n            loading.find("i").addClass("little");\n            loading.find("i").addClass("gp_icon_loading_white_12x12");\n        } else {\n            loading.find("i").addClass("gp_icon_loading_white_40x40");\n        }\n        if (baseele.css("position") != "absolute" && baseele.css("position") != "fixed" && baseele.css("position") != "relative" && baseele.prop("tagName") && baseele.prop("tagName").toLowerCase() != "body") baseele.css("position", "relative");\n        baseele.append(loading);\n    }\n    //fix\n    if (option.fix || !o) {\n        loading.css("position", "fixed");\n    }\n    if (!option.unlock) {\n        loading.on("touchstart", exports.StopDefault);\n        loading.on("mousedown", exports.StopDefault);\n    }\n    return loading;\n};\n\nexports.CancelLoading = function (o) {\n    var baseele = o ? o : $("body");\n    var loading = baseele.children(".overloading");\n    if (loading.size() > 0) {\n        loading.remove();\n    }\n};\n\nexports.HasLoading = function (o) {\n    var baseele = o ? o : $("body");\n    var ret = false;\n    var loading = baseele.children(".overloading");\n    if (loading.size() > 0) {\n        ret = true;\n    }\n    return ret;\n};\n\n/**\r\n * 获取JSON\r\n * @param str\r\n * @returns {boolean}\r\n * @constructor\r\n * @param errorback\r\n */\nexports.JSONParse = function (str, errorback) {\n    var ret = false;\n    if (!exports.isObject(str)) {\n        if (JSON && JSON.parse) {\n            try {\n                ret = JSON.parse(str);\n            } catch (e) {\n                //console.log(e);\n                ret = false;\n            }\n        } else {\n            try {\n                ret = eval("(" + arguments + ")");\n            } catch (e) {\n                //console.log(e);\n                errorback && errorback.call && errorback();\n                ret = false;\n            }\n        }\n    } else {\n        ret = str;\n    }\n    return ret;\n};\n\nexports.UploadImage = function (option) {\n    var option = option ? option : {};\n    var _fncall = option.callback ? option.callback : function () {};\n    if (option.file) {\n        var _action = option.src ? option.src : "";\n        var _target = \'UploadImage\';\n        var _form = $("<form enctype=\'multipart/form-data\' method=\'post\' action=\'" + _action + "\' target=\'" + _target + "\'></form>");\n        var _fnname = "fileupload" + new Date().getTime();\n        _form.append(\'<input type="hidden" name="pass_hash" value="82273a6ba2126d3af24ce2d0cb0af515"  />\');\n        _form.append(\'<input type="hidden" name="g_session_id" value="5acc9f5567a3b38a7b7ace59f9df6efc"/>\');\n        _form.append(\'<input type="hidden" name="is_phone" value="1"  />\');\n        _form.append(\'<input type="hidden" name="__go" value="1"  />\');\n        _form.append(\'<input type="hidden" name="callbackUrl" value="\' + Config.website + \'/admin/action/system_test_action.php?act=show_img/>\');\n        $("body").append(_form);\n        if ($("#" + _target).size() < 1) {\n            var _ifa = $("<iframe name=\'" + _target + "\' id=\'" + _target + "\'></iframe>");\n            _ifa.css("display", "none");\n            $("body").append(_ifa);\n        }\n        _form.submit();\n    }\n};\n\nexports.ScrollTo = function (obj, opt) {\n    var t = 0,\n        ast;\n    if (exports.isNumber(obj)) {\n        t = parseInt(obj);\n    } else if (obj && obj.offset && obj.size && obj.size() > 0) {\n        t = obj.offset().top;\n    } else return false;\n    opt = opt || {};\n    var now = $(window).scrollTop();\n    var duration = opt.duration || 400;\n    if (opt.dev) {\n        t = t + opt.dev;\n    }\n    if (t - now < 50) {\n        duration = duration / 10;\n    }\n    var pre = (t - now) / duration * 20;\n    var count = Math.round(duration / 20);\n    var n = 1;\n    var fn = function fn() {\n        if (n <= count) {\n            now = now + pre;\n            if (n == count) now = t;\n            $(window).scrollTop(now);\n            n++;\n            ast = setTimeout(fn, 20);\n        }\n    };\n    fn();\n    var cc_a = exports.MouseWheel($(window), function () {\n        clearTimeout(ast);\n        exports.MouseWheelCancel($(this), cc_a);\n    });\n};\n\n/**\r\n * Tips 提示信息，从一个位置出来，往某个点移动\r\n * @param x:中心点位置left\r\n * @param y:中心店位置top\r\n * @param option:选项\r\n * distance:移动距离[对象的话为坐标系,对象格式为:{x:0,y:0}]\r\n * css :一个对象，为tips的覆盖样式\r\n * shirf:一个对象，其实位置的偏移值 {x:0,y:0}\r\n * value:string 显示内容,默认是+1\r\n * delay:延迟多少秒执行消失动画 默认:1s [-1的时候不消失]\r\n * duration:动画执行时间 默认1s\r\n * callback:结束以后的返回函数\r\n * before:触发动画额函数，也就是消失之前\r\n * ids:标识\r\n *\r\n * 第一个参数是obj,则获取这个obj的中心点，第二个参数则为option\r\n *\r\n */\nexports.Tips = function (x, y, option) {\n    //如果x为JQ对象\n    if (x && x.offset) {\n        option = y;\n        var offset = x.offset();\n        if (exports.isObject(offset) && offset.width) {\n            y = offset.top + offset.height / 2;\n            x = offset.left + offset.width / 2;\n        } else if (exports.isObject(offset)) {\n            y = offset.top + x.outerHeight() / 2;\n            x = offset.left + x.outerWidth() / 2;\n        }\n    }\n\n    option = exports.isObject(option) ? option : {};\n\n    var distance = option.distance,\n        d_x,\n        d_y,\n        css = option.css,\n        shirf = exports.isObject(option.shirf) ? option.shirf : {},\n        value = option.value || "+1",\n        delay = parseInt(option.delay),\n        duration = parseInt(option.duration),\n        callback = exports.isFunction(option.callback) ? option.callback : function () {},\n        before = exports.isFunction(option.before) ? option.before : function () {},\n        ids = option.ids || false;\n\n    delay = !isNaN(delay) ? delay : 1000;\n    duration = !isNaN(duration) ? duration : 1000;\n\n    if (exports.isObject(distance) && distance.x && distance.y) {\n        d_x = distance.x;\n        d_y = distance.y;\n    } else if (!isNaN(parseInt(distance))) {\n        d_x = 0;\n        d_y = parseInt(distance);\n    } else {\n        d_x = 0;\n        d_y = -45;\n    }\n\n    var tips = $("<span class=\'base_tips\'></span>");\n\n    if (css) {\n        tips.css(css);\n    }\n\n    tips.html(value);\n\n    $("body").append(tips);\n\n    var w0 = tips.offset().width || tips.outerWidth();\n    var h0 = tips.offset().height || tips.outerHeight();\n\n    if (w0 && h0) {\n        x = x - w0 / 2;\n        y = y - h0 / 2;\n    }\n\n    x = shirf.x ? x + shirf.x : x;\n    y = shirf.y ? y + shirf.y : y;\n\n    tips.css({\n        left: x,\n        top: y\n    });\n\n    tips.html(value);\n\n    //消失\n    var _hide = function _hide() {\n        tips.css({\n            opacity: 0,\n            "transform": "translate(" + d_x + "px," + d_y + "px)",\n            "-webkit-transform": "translate(" + d_x + "px," + d_y + "px)",\n            "transition": "all " + duration / 1000 + "s",\n            "-webkit-transition": "all " + duration / 1000 + "s"\n        });\n\n        before && before.call();\n        setTimeout(function () {\n            tips.remove();\n            tips = null;\n            callback && callback.call();\n        }, duration);\n    };\n\n    if (delay >= 0) {\n        setTimeout(function () {\n            _hide();\n        }, delay);\n    }\n    tips.on("hide", _hide);\n    if (ids) {\n        tips.data("ids", ids);\n    }\n    return tips;\n};\n\n/**\r\n * 显示\r\n * @param msg\r\n * @param type 信息类型[1:失败 | 2:正确 | 3:警告]\r\n * @param option:选项\r\n * position:fix|absolute 默认fix\r\n * istip:使用tips的方式\r\n */\nvar msgwaiting = [];\nexports.Msg = function (msg, type, option) {\n    if (exports.isObject(type)) {\n        option = type;\n        type = option.type || 2;\n    } else {\n        option = option || {};\n    }\n\n    var position = option.position || "fixed";\n\n    var x = $(window).width() * 0.5;\n    var y = $(window).height() - 50;\n\n    while ($.inArray(y, msgwaiting) > -1) {\n        y = y - 30;\n    }\n\n    msgwaiting.push(y);\n    exports.Tips(x, y, {\n        css: {\n            "position": position,\n            "background": "rgba(000,000,000,0.5)",\n            "overflow": "hidden",\n            "width": "50%",\n            "height": "auto",\n            "color": "#fff",\n            "padding": "5px",\n            "border-radius": "5px",\n            "box-sizing": "border-box",\n            "-webkit-box-sizing": "border-box",\n            "z-index": option.z_index ? option.z_index : "100001"\n        },\n        delay: 2000,\n        value: msg,\n        before: function before() {\n            msgwaiting.splice(0, 1);\n        }\n    });\n};\n\n/***\r\n * 图片裁剪\r\n * @param o 图片\r\n * @param opt 选项\r\n * @constructor\r\n */\nexports.ImageResize = function (o, opt) {\n    opt = opt || {};\n    opt.callback = opt.callback || function () {};\n    o = $(o);\n    if (o.width && o.height) {\n        var src = o.attr("src");\n        if (src) {\n            if (opt.loading) {\n                exports.GetLoading(o.parent());\n            }\n            var img = new Image();\n            img.onload = function () {\n                if (o && o.width && o.height) {\n                    var p = o.parent();\n                    var w = p.width();\n                    var w0 = img.width;\n                    var h0 = img.height;\n                    var h = h0 / w0 * w;\n                    var W = p.width();\n                    var H = p.height();\n                    //如果是zepto，则需要计算里面的边框\n                    if (!p.outerWidth) {\n                        var BDW = parseInt(p.css("border-right-width")) + parseInt(p.css("border-left-width"));\n                        BDW = isNaN(BDW) ? 0 : BDW;\n                        W = W - BDW;\n                        var BDH = parseInt(p.css("border-top-width")) + parseInt(p.css("border-top-width"));\n                        BDH = isNaN(BDW) ? 0 : BDH;\n                        H = H - BDH;\n                        var PDW = parseInt(p.css("padding-left")) + parseInt(p.css("padding-right"));\n                        PDW = isNaN(PDW) ? 0 : PDW;\n                        W = W - PDW;\n                        var PDH = parseInt(p.css("padding-top")) + parseInt(p.css("padding-bottom"));\n                        PDH = isNaN(PDH) ? 0 : PDH;\n                        H = H - PDH;\n                    }\n\n                    if (opt.showall) {\n                        if (h < H) {\n                            var t = (H - h) / 2;\n                            o.css({ "margin-left": "auto", "height": "auto", "width": "100%", "margin-top": t });\n                        } else {\n                            var hz = H;\n                            var wz = w / h * H;\n                            var l = (W - wz) / 2;\n                            o.css({ "margin-left": l, "height": "100%", "width": "auto", "margin-top": "auto" });\n                        }\n                    } else {\n                        if (h < H) {\n                            var hz = H;\n                            var wz = w / h * H;\n                            var l = (W - wz) / 2;\n                            o.css({ "margin-left": l, "height": "100%", "width": "auto", "margin-top": "auto" });\n                        } else {\n                            var t = (H - h) / 2;\n                            o.css({ "margin-left": "auto", "height": "auto", "width": "100%", "margin-top": t });\n                        }\n                    }\n                    setTimeout(function () {\n                        o.attr("width", "");\n                        o.attr("height", "");\n                    }, 20);\n                    o.css("display", "block");\n                    o.removeClass("resize");\n                    if (opt.loading) {\n                        exports.CancelLoading(o.parent());\n                    }\n                    if (!exports.Browser().ie) {\n                        o.attr("width", "");\n                        o.attr("height", "");\n                    }\n                    if (opt.callback) {\n                        opt.callback(true);\n                    }\n                }\n            };\n            img.onerror = function () {\n                o.css("display", "none");\n                if (opt.callback) {\n                    opt.callback(false);\n                }\n            };\n            img.src = src;\n        }\n    }\n};\n\n/**\r\n * 滚轮事件\r\n * @param obj\r\n * @param fn\r\n */\nexports.MouseWheel = function (obj, fn) {\n    fn = exports.isFunction(fn) ? fn : function () {};\n    var _callback = function _callback(e) {\n        var evt = window.event || e;\n        var wheeldelta = evt.detail ? -evt.detail / 3 : evt.wheelDelta / 120;\n        fn.call(obj, evt, wheeldelta);\n    };\n    if (obj && fn) {\n        var mousewheelevt = exports.Browser().moz ? "DOMMouseScroll" : "mousewheel";\n        if (document.attachEvent) //if IE (and Opera depending on user setting)\n            obj.get(0).attachEvent("on" + mousewheelevt, _callback);else if (document.addEventListener) //WC3 browsers\n            obj.get(0).addEventListener(mousewheelevt, _callback, false);\n    }\n    return _callback;\n};\n\n/**\r\n * 清除鼠标事件\r\n * @param obj\r\n * @param fn\r\n * @constructor\r\n */\nexports.MouseWheelCancel = function (obj, fn) {\n    fn = exports.isFunction(fn) ? fn : function () {};\n    if (obj && fn) {\n        var mousewheelevt = exports.Browser().moz ? "DOMMouseScroll" : "mousewheel";\n        if (document.attachEvent) //if IE (and Opera depending on user setting)\n            obj.get(0).detachEvent("on" + mousewheelevt, fn);else if (document.addEventListener) //WC3 browsers\n            obj.get(0).removeEventListener(mousewheelevt, fn, false);\n    }\n};\n\n/**\r\n * 创建队列函数\r\n * @returns {{}}\r\n * @constructor\r\n */\nexports.Q = function () {\n    var ret = {};\n    ret.queue = [];\n    ret.isqueue = true;\n    var addqueue = function addqueue(key) {\n\n        ret[key] = function () {\n            var _arguments = arguments;\n            ret.queue.push(function () {\n\n                exports[key].apply(ret, _arguments);\n            });\n            return ret;\n        };\n    };\n    addqueue("LoadJs");\n    addqueue("LoadCss");\n    ret.next = function () {\n        var queue = ret.queue;\n        if (queue.length > 0) {\n            var _next = queue.splice(0, 1)[0];\n\n            if (exports.isFunction(_next)) {\n                _next.call();\n            }\n        }\n    };\n    return ret;\n};\n\n/**\r\n * 加载一个JS\r\n * @param url 地址\r\n * @param opt 选项 ：\r\n * 1：charset 字符集\r\n * 2:append 插入的地方选择器\r\n * 3:callback 返回error 和url\r\n * 4:timeout 超时\r\n * @constructor\r\n * @return {boolean}\r\n */\nexports.LoadJs = function (url, opt) {\n    var ret = false,\n        ast;\n    if (!this.isqueue) {\n        ret = exports.Q();\n    } else {\n        ret = this;\n    }\n\n    opt = exports.isObject(opt) ? opt : {};\n    var callback = exports.isFunction(opt.callback) ? opt.callback : function () {};\n\n    var head = document.getElementsByTagName(\'head\')[0],\n        js = document.createElement(\'script\');\n\n    if (opt.id) {\n        var cc_obj = $("[data-loadjs_id=" + opt.id + "]");\n        if (cc_obj && cc_obj.size() > 0) {\n            cc_obj.remove();\n        }\n    }\n\n    js.setAttribute(\'type\', \'text/javascript\');\n    js.setAttribute(\'src\', url);\n    if (opt.id) {\n        js.setAttribute("data-loadjs_id", opt.id);\n    }\n    opt.charset && js.setAttribute(\'charset\', opt.charset);\n\n    if (opt.append && opt.append.size && opt.append.size() > 0) {\n        opt.append.append(js);\n    } else {\n        head.appendChild(js);\n    }\n\n    //执行回调\n    var callbackFn = function callbackFn(e, error_url) {\n        clearTimeout(ast);\n        if (typeof callback === \'function\') {\n            callback(e, error_url);\n        }\n        ret.next();\n    };\n\n    if (document.all) {\n        //IE\n        js.onreadystatechange = function (e) {\n            //alert(url+" "+js.readyState);\n            if (js.readyState === \'loaded\' || js.readyState === \'complete\') {\n                //js.onreadystatechange = null;\n                callbackFn();\n            }\n        };\n    } else {\n        js.onload = function () {\n            callbackFn();\n        };\n        js.onerror = function (e) {\n            callbackFn(e, url);\n        };\n    }\n\n    if (opt.timeout) {\n        ast = setTimeout(function () {\n            if (js.onerror) {\n                js.onerror();\n                js.onload = function () {};\n                js.onerror = function () {};\n            }\n        }, opt.timeout);\n    }\n    return ret;\n};\n\n/**\r\n * 加载CSS\r\n * @param url\r\n * @param opt\r\n * 1：charset 字符集\r\n * 2:append 插入的地方选择器\r\n * 3:callback 返回error 和url\r\n * 4:timeout 超时\r\n * @returns {boolean}\r\n * @constructor\r\n */\nexports.LoadCss = function (url, opt) {\n    var ret = false;\n    if (!this.isqueue) {\n        ret = exports.Q();\n    } else {\n        ret = this;\n    }\n\n    opt = exports.isObject(opt) ? opt : {};\n\n    var callback = function callback() {\n        if (exports.isFunction(opt.callback)) {\n            opt.callback();\n        }\n        ret.next();\n    };\n\n    var _ast = false;\n    var isload = false; //主要解决某些浏览器比如FF 出现两次loading\n\n    var csstmp = document.createElement(\'link\');\n    var head = document.getElementsByTagName("head")[0];\n    head.appendChild(csstmp);\n    csstmp.setAttribute("href", url);\n    csstmp.setAttribute("type", "text/css");\n    csstmp.setAttribute("rel", "stylesheet");\n    opt.charset && csstmp.setAttribute("charset", opt.charset);\n    csstmp.onload = function () {\n        if (isload) return false;\n        clearTimeout(_ast);\n        isload = true;\n        callback(url);\n    };\n    csstmp.onerror = function (e) {\n        clearTimeout(_ast);\n        //console.log("加载错误,css " + url + " 加载失败");\n        //console.log(e);\n        callback(false);\n    };\n    if (opt.timeout) {\n\n        _ast = setTimeout(function () {\n            csstmp.onerror();\n            //csstmp.setAttribute("href", "");\n            //console.log("请求: " + csstmp.getAttribute("href") + " 超时");\n            csstmp.onerror = function () {};\n            csstmp.onload = function () {};\n            // head.removeChild(csstmp);\n        }, opt.timeout);\n    }\n\n    head.appendChild(csstmp);\n    return ret;\n};\n\n/**\r\n * 获取URL参数\r\n * @param str\r\n * @returns {*}\r\n * @constructor\r\n */\nexports.GetUrl = function (str) {\n    var this_str = location.href;\n    var this_num = this_str.indexOf("?");\n    if (this_num < 0) return false;\n    var this_option = this_str.substr(this_num + 1);\n    if (this_option.indexOf("#") > -1) {\n        this_option = this_option.substr(0, this_option.indexOf("#"));\n    }\n    var this_optionarr = this_option.split("&");\n    var returnstr = null;\n    for (this_cout = 0; this_cout < this_optionarr.length; this_cout++) {\n        var this_canshu = this_optionarr[this_cout].split("=");\n        if (this_canshu < 2) continue;\n        if (this_canshu[0] == str) returnstr = this_canshu[1];\n    }\n    if (returnstr == null) return false;else return returnstr;\n};\n\n/**\r\n * 获取hash参数\r\n */\nexports.GetHash = function (str) {\n    var this_str = location.href;\n    var this_num = this_str.indexOf("#");\n    if (this_num < 0) return false;\n    var this_option = this_str.substr(this_num + 1);\n    var this_optionarr = this_option.split("&");\n    var returnstr = null;\n    for (this_cout = 0; this_cout < this_optionarr.length; this_cout++) {\n        var this_canshu = this_optionarr[this_cout].split("=");\n        if (this_canshu < 2) continue;\n        if (this_canshu[0] == str) returnstr = this_canshu[1];\n    }\n    if (returnstr == null) return false;else return returnstr;\n};\n\n/**\r\n * hash事件管理-添加\r\n * ID 标识\r\n */\nvar hash_array = {};\nexports.SetHash = function (id, fn) {\n    hash_array[id] = fn;\n};\n\nexports.UnsetHash = function (id) {\n    hash_array[id] = null;\n};\n\nwindow.onhashchange = function () {\n    $.each(hash_array, function (i, item) {\n        if (exports.isFunction(item)) {\n            item.call();\n        }\n    });\n};\n\n/**\r\n * 将obj2 覆盖 obj1\r\n * @param obj1\r\n * @param obj2\r\n * @returns {*}返回一个新对象\r\n */\nexports.MerageObj = function (obj1, obj2) {\n    for (var p in obj2) {\n        try {\n            if (_typeof(obj2[p]) == "object") {\n                obj1[p] = exports.MerageObj(obj1[p], obj2[p]);\n            } else {\n                obj1[p] = obj2[p];\n            }\n        } catch (e) {\n            obj1[p] = obj2[p];\n        }\n    }\n    return obj1;\n};\n\n/**\r\n * 给O_base 赋默认值\r\n * @param O_base\r\n * @param O_default\r\n * @constructor\r\n */\nexports.MerageObjByDefault = function (O_base, O_default) {\n    for (var x in O_default) {\n        if (O_default.hasOwnProperty(x)) {\n            var item = O_default[x];\n            if (typeof O_base[x] == "undefined") {\n                O_base[x] = item;\n            } else if (exports.isObject(item) && exports.isObject(O_base[x])) {\n                exports.MerageObjByDefault(O_base[x], item);\n            }\n        }\n    }\n};\n\n/**\r\n * 判断参数arr是否数组\r\n * @param o 参数\r\n */\nexports.isArray = function (o) {\n    return Object.prototype.toString.call(o) === \'[object Array]\';\n};\n\nexports.isFunction = function (arg) {\n    return typeof arg === \'function\';\n};\n\nexports.isString = function (arg) {\n    return typeof arg === \'string\';\n};\n\n/**\r\n * [Object_hasAttr object是否为空对象]\r\n * @param {[type]} obj [description]\r\n */\nexports.Object_hasAttr = function (obj) {\n    var hasAttr = false;\n    var obj = obj;\n    if (exports.isObject(obj)) {\n        for (key in obj) {\n            hasAttr = true;\n        }\n    } else {\n        return "not a object";\n    }\n    return hasAttr;\n};\n\n/**\r\n * 是否对象\r\n * @param arg\r\n * @returns {boolean}\r\n */\nexports.isObject = function (arg) {\n    return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === \'object\' && arg !== null;\n};\n\n/**\r\n * 是否数字\r\n * @param arg\r\n * @returns {boolean}\r\n */\n\nexports.isNumber = function (arg) {\n    return typeof arg === \'number\';\n};\n\nexports.isString = function (arg) {\n    return typeof arg === "string";\n};\n\n/**\r\n * 禁止默认动作\r\n * @param e\r\n * @returns {boolean}\r\n * @constructor\r\n */\nexports.StopDefault = function (e) {\n    if (e && e.preventDefault) {\n        e.preventDefault();\n    } else {\n        window.event.returnValue = false;\n    }\n    return false;\n};\n\n/**\r\n * 禁止冒泡\r\n * @param e\r\n * @constructor\r\n */\nexports.StopMaoPao = function (e) {\n    if (e && e.stopPropagation) {\n        e.stopPropagation();\n    } else {\n        window.event.cancelBubble = true;\n    }\n};\n\n/**\r\n * 获取对象长度\r\n * @param o\r\n * @returns {number}\r\n * @constructor\r\n */\nexports.ObjectLength = function (o) {\n    var i = 0;\n    $.each(o, function () {\n        i++;\n    });\n    return i;\n};\n\n/**\r\n * 删除对象第一个元素\r\n * @param o\r\n * @returns {*}\r\n * @constructor\r\n */\nexports.Objectshirf = function (o) {\n    var n = 0;\n    var ret = null;\n    $.each(o, function (i) {\n        if (n++ == 0) {\n            ret = o[i];\n            delete o[i];\n        }\n    });\n    return ret;\n};\n\n/**\r\n * 清除左右两边空格\r\n * @returns {*}\r\n * @constructor\r\n */\nexports.Trim = function (str) {\n    return exports.isString(str) ? str.replace(/(^\\s*)|(\\s*$)/g, "") : str;\n};\n\n/**\r\n * 清除左边空格\r\n * @returns {*}\r\n * @constructor\r\n */\nexports.Ltrim = function (str) {\n    return exports.isString(str) ? str.replace(/(^\\s*)/g, "") : str;\n};\n\n/**\r\n * 清除右边空格\r\n * @returns {*}\r\n * @constructor\r\n */\nexports.Rtrim = function (str) {\n    return exports.isString(str) ? str.replace(/(\\s*$)/g, "") : str;\n};\n\n/**\r\n * 设置Storage\r\n * @param key key值\r\n * @param str objcet=>string string=>string\r\n * @param type 类型 1:local 2:session 默认1\r\n * @constructor\r\n * @return {boolean||null}\r\n */\nexports.SetVar = function (key, str, type) {\n    key = exports.isString(key) ? key : "";\n    if (exports.isString(str) || str === null || str === false || str === true) {\n        //str=str;\n    } else if (exports.isObject(str)) {\n        str = JSON.stringify(str);\n    } else {\n        str = "";\n    }\n    if (key && (str || str === null || str === false)) {\n        if (localStorage && localStorage.setItem) {\n            type = type || 1;\n            if (type == 1 || !(sessionStorage && sessionStorage.setItem)) {\n                localStorage.setItem(key, str);\n            } else {\n                sessionStorage.setItem(key, str);\n            }\n            return true;\n        } else {\n            //console.log("不支持本地储存");\n            return false;\n        }\n    } else {\n        return null;\n    }\n};\n\n/**\r\n *\r\n * @param key key值\r\n * @param type 类型 1:local 2:session 默认1\r\n * @returns {*}\r\n * @constructor\r\n */\nexports.GetVar = function (key, type) {\n    key = exports.isString(key) ? key : "";\n    if (key) {\n        if (localStorage && localStorage.getItem) {\n            type = type || 1;\n            var ret = "";\n            if (type == 1 || !(sessionStorage && sessionStorage.getItem)) {\n                ret = localStorage.getItem(key);\n            } else {\n                ret = sessionStorage.getItem(key);\n            }\n            if (ret == "null" || ret == "false") {\n                ret = null;\n            }\n            return ret;\n        } else {\n            //console.log("不支持本地储存");\n            return false;\n        }\n    } else {\n        return null;\n    }\n};\n\n/**\r\n * 继承类\r\n * @param model 原类\r\n * @param opt 新类 【construct】\r\n * @returns {Function}\r\n * @constructor\r\n */\nexports.ExtendClass = function (model, opt) {\n    if (!model || !model.call) return function () {};\n    opt = opt || {};\n    var construct = opt["construct"] || function () {};\n    var ret = {};\n    var NewClass = function NewClass() {\n        var self = this;\n        opt = opt || {};\n        model.apply(self, arguments);\n        construct && construct.call && construct.apply(self, arguments);\n    };\n    for (var x in model.prototype) {\n        NewClass.prototype[x] = model.prototype[x];\n    }\n    for (var x in opt) {\n        if (opt.hasOwnProperty(x) && opt[x] && opt[x].call) {\n            NewClass.prototype[x] = opt[x];\n        }\n    }\n    return NewClass;\n};\n\n/**\r\n * 分析URL\r\n * @param url\r\n * @returns {{source: *, protocol: string, host: string, port: (*|string|Function), query: (*|string), params, file: *, hash: string, path: string, relative: *, segments: Array, link: *, params_sort: Function, toUrl: Function}}\r\n * @constructor\r\n */\nexports.ParseURL = function (url) {\n    var a = document.createElement(\'a\');\n    a.href = url;\n    var cc_fn = function cc_fn() {\n        var ret = {},\n            seg = a.search.replace(/^\\?/, \'\').split(\'&\'),\n            len = seg.length,\n            i = 0,\n            s;\n        for (; i < len; i++) {\n            if (!seg[i]) {\n                continue;\n            }\n            s = seg[i].split(\'=\');\n            ret[s[0]] = s[1];\n        }\n        return ret;\n    };\n    var cc_obj = cc_fn();\n    var cc_ret = {\n        source: url,\n        protocol: a.protocol.replace(\':\', \'\'),\n        host: a.hostname,\n        port: a.port,\n        query: a.search,\n        params: cc_obj,\n        params_change: function params_change(key, value) {\n            cc_obj[key] = value;\n            return this;\n        },\n        file: (a.pathname.match(/\\/([^\\/?#]+)$/i) || [, \'\'])[1],\n        hash: a.hash.replace(\'#\', \'\'),\n        path: a.pathname.replace(/^([^\\/])/, \'/$1\'),\n        relative: (a.href.match(/tps?:\\/\\/[^\\/]+(.+)/) || [, \'\'])[1],\n        pathname: function pathname() {\n            return (cc_ret.toUrl().match(/tps?:\\/\\/[^\\/]+(.+)/) || [, \'\'])[1];\n        },\n        segments: a.pathname.replace(/^\\//, \'\').split(\'/\'),\n        set: function set(key, value) {\n            if ($.inArray(key, ["host", "hostname", "port"]) > -1) {\n                a[key] = value;\n                cc_ret.host = a.host;\n                cc_ret.port = a.port;\n            }\n        },\n        link: a.href.split("?")[0],\n        params_sort: function params_sort() {\n            var cc_new_obj = {};\n            var cc_new_arr = [];\n            $.each(cc_obj, function (i, item) {\n                if (item) {\n                    cc_new_arr.push(i);\n                }\n            });\n            cc_new_arr.sort();\n            $.each(cc_new_arr, function (i, item) {\n                cc_new_obj[item] = cc_obj[item];\n            });\n            cc_ret.params = cc_obj = cc_new_obj;\n        },\n        clear_hash: function clear_hash() {\n            a.href = a.href.split("#")[0];\n            return this;\n        },\n        toPath: function toPath(sort) {\n            var ret = a.href.split("?")[0];\n            ret = ret + "?";\n            sort && cc_ret.params_sort();\n            $.each(cc_obj, function (i, item) {\n                if (item) {\n                    ret += i + "=" + item + "&";\n                }\n            });\n            if (ret.substr(ret.length - 1) === "&") {\n                ret = ret.substr(0, ret.length - 1);\n            }\n            if (ret.substr(ret.length - 1) === "?") {\n                ret = ret.substr(0, ret.length - 1);\n            }\n            ret = (ret.match(/tps?:\\/\\/[^\\/]+(.+)/) || [, \'\'])[1];\n            return ret;\n        },\n        toUrl: function toUrl(sort) {\n            var ret = a.href.split("?")[0];\n            ret = ret + "?";\n            sort && cc_ret.params_sort();\n            $.each(cc_obj, function (i, item) {\n                if (item) {\n                    ret += i + "=" + item + "&";\n                }\n            });\n            if (ret.substr(ret.length - 1) === "&") {\n                ret = ret.substr(0, ret.length - 1);\n            }\n            if (ret.substr(ret.length - 1) === "?") {\n                ret = ret.substr(0, ret.length - 1);\n            }\n            return ret;\n        }\n    };\n    return cc_ret;\n};\n\n/**\r\n * 通过时间戳获取时间格式\r\n * @param str\r\n * @constructor\r\n * @param format\r\n * @return {string}\r\n */\nexports.GetTime = function (str, format) {\n    str = parseInt(str);\n    var D = false;\n    if (isNaN(str)) {\n        D = new Date();\n    } else {\n        D = new Date(str);\n    }\n    var ret = "";\n    if (D && !isNaN(D.getTime())) {\n        var fullyear = D.getFullYear();\n        var month = D.getMonth() + 1;\n        var date = D.getDate();\n        var hours = D.getHours();\n        var minute = D.getMinutes();\n        var second = D.getSeconds();\n        var doublemonth = month > 9 ? month : "0" + month;\n        var doubledate = date > 9 ? date : "0" + date;\n        var doubleyear = fullyear.toString().substr(2);\n        var doublehours = hours > 9 ? hours : "0" + hours;\n        var doubleminues = minute > 9 ? minute : "0" + minute;\n        var doublesecond = second > 9 ? second : "0" + second;\n        ret = format;\n        ret = ret.replace(/YYYY/g, fullyear);\n        ret = ret.replace(/YY/g, doubleyear);\n        ret = ret.replace(/mm/g, doublemonth);\n        ret = ret.replace(/m/g, month);\n        ret = ret.replace(/dd/g, doubledate);\n        ret = ret.replace(/d/g, date);\n        ret = ret.replace(/hh/g, doublehours);\n        ret = ret.replace(/h/g, hours);\n        ret = ret.replace(/ii/g, doubleminues);\n        ret = ret.replace(/i/g, minute);\n        ret = ret.replace(/ss/g, doublesecond);\n        ret = ret.replace(/s/g, second);\n    }\n    return ret;\n};\n\n/**\r\n * 预加载切换图片\r\n * @param src {object}  图片地址\r\n * @param opt {object} 选项\r\n * callback|errorback|timeout[20000ms]|loading[obj]\r\n * @constructor\r\n * @return {object}\r\n */\nexports.SetImgSrc = function (src, opt) {\n    if (!src) return false;\n    opt = exports.isObject(opt) ? opt : {};\n    opt.timeout = opt.timeout || 200000;\n    opt.loading = opt.loading || false;\n    opt.debug = opt.debug || 0;\n    var ast = false;\n    if (opt.loading && opt.loading.size() > 0) {\n        exports.GetLoading(opt.loading, opt.loading_type);\n    }\n    var _newimg = new Image();\n    _newimg.onload = function () {\n        clearTimeout(ast);\n        setTimeout(function () {\n            opt.callback && opt.callback.call && opt.callback.call(_newimg);\n            exports.CancelLoading(opt.loading);\n        }, opt.debug);\n    };\n    _newimg.onerror = function () {\n        opt.errorback && opt.errorback.call && opt.errorback.call(_newimg);\n        if (_newimg && _newimg.onload) _newimg.onload = null;\n        _newimg = null;\n        exports.CancelLoading(opt.loading);\n    };\n    ast = setTimeout(function () {\n        _newimg.onerror();\n    }, opt.timeout);\n    _newimg.src = src;\n};\n\n/**\r\n * 获取浏览器类型\r\n * @returns {*} 返回一个对象。【\r\n * ipad|iphoneOs|midp|uc|uc7|uc|android|ce|winphone 手机浏览器类型\r\n * ie5|ie6|ie7|ie8|ie9|ie10|ie11|moz|webkit|opera|safari PC浏览器类型\r\n * mob:是否手机端\r\n * pc:是否PC端\r\n * iosversion:IOS版本\r\n * 】\r\n * @constructor\r\n */\nexports.Browser = function () {\n    if (Browser) return Browser;else {\n        Browser = Ghost_Pig_Browser_fn();\n\n        return Browser;\n    }\n};\n//获取浏览器版本\nvar Ghost_Pig_Browser_fn = function Ghost_Pig_Browser_fn() {\n    var _fn = function _fn() {\n        var ret = {};\n        var sUserAgent = navigator.userAgent.toLowerCase();\n        ret.ipad = sUserAgent.match(/ipad/i) == "ipad";\n        ret.ipod = sUserAgent.match(/ipod/i) == "ipod";\n        ret.iphoneOs = sUserAgent.match(/iphone os/i) == "iphone os";\n        ret.midp = sUserAgent.match(/midp/i) == "midp";\n        ret.uc7 = sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";\n        ret.uc = sUserAgent.match(/ucweb/i) == "ucweb";\n        ret.qq = /qqbrowser/i.test(sUserAgent);\n        ret.android = sUserAgent.match(/android/i) == "android";\n        ret.is360 = /360 aphone browser/i.test(sUserAgent) || /360browser/i.test(sUserAgent);\n        ret.chrome = /chrome/i.test(sUserAgent);\n        ret.ce = sUserAgent.match(/windows ce/i) == "windows ce";\n        ret.winphone = sUserAgent.match(/windows mobile/i) == "windows mobile";\n        ret.isweixin = sUserAgent.match(/MicroMessenger/i) == "micromessenger";\n        if (ret.ipad || ret.iphoneOs || ret.ipod) {\n            ret.ios = true;\n        }\n        if (!(ret.ipad || ret.iphoneOs || ret.midp || ret.uc7 || ret.uc || ret.android || ret.ce || ret.winphone)) {\n            return false;\n        } else {\n            if (navigator.userAgent.toLowerCase().match(/applewebkit\\/([\\d.]+)/).length > 1) {\n                var _v = parseFloat(navigator.userAgent.toLowerCase().match(/applewebkit\\/([\\d.]+)/)[1]);\n                _v = !isNaN(_v) ? _v : null;\n                if (_v < 534 && !ret.uc) ret.isandroidbrowser = true;\n            }\n            return ret;\n        }\n    };\n\n    var _iosfn = function _iosfn() {\n        var sUserAgent = navigator.userAgent.toLowerCase();\n        var ret = null;\n        var reg = /OS [1-9]_\\d[_\\d]* like Mac OS X/i;\n        var vreg = /\\d+/g;\n        var iosstr = sUserAgent.match(reg);\n        if (iosstr && iosstr.length) {\n            var ver = iosstr[0].match(vreg);\n            if (ver) {\n                ver = ver.join(".");\n                ret = ver;\n            }\n        }\n        return ret;\n    };\n\n    var _android = function _android() {\n        var sUserAgent = navigator.userAgent.toLowerCase();\n        var ret = null;\n        var reg = /android (\\d+.)+\\d/g;\n        var vreg = /\\d/g;\n        var androidstr = sUserAgent.match(reg);\n        if (androidstr && androidstr.length) {\n            var ver = androidstr[0].match(vreg);\n            if (ver) {\n                ver = ver.join(".");\n                ret = ver;\n            }\n        }\n        return ret;\n    };\n\n    var _weixin_version = function _weixin_version() {\n        var sUserAgent = navigator.userAgent.toLowerCase();\n        var ret = null;\n        var reg = /MicroMessenger\\/([\\d\\.]+)/i;\n        var str = sUserAgent.match(reg);\n        if (str && str.length > 1) {\n            str = str[1];\n            ret = str;\n        }\n        return ret;\n    };\n\n    var _versionfn = function _versionfn(str) {\n        var _ret = 0;\n        try {\n            var _ver = parseFloat(navigator.userAgent.toLowerCase().match(str)[1]);\n            if (isNaN(_ver)) _ret = 0;else _ret = _ver;\n        } catch (e) {\n            _ret = 0;\n        }\n        return _ret;\n    };\n    var ret = {};\n    var _fna = function _fna(obj) {\n        obj = obj ? obj : {};\n        if (obj.moz) return "Mozilla";\n        if (obj.webkit) return "WebKit";\n        if (obj.opera) return "Opera";\n        if (obj.ie11) return "Internet Explorer 11";\n        if (obj.ie10) return "Internet Explorer 10";\n        if (obj.ie9) return "Internet Explorer 9";\n        if (obj.ie8) return "Internet Explorer 8";\n        if (obj.ie7) return "Internet Explorer 7";\n        if (obj.ie6) return "Internet Explorer 6";\n        if (obj.ie5) return "Internet Explorer 5";\n        if (obj.ipad) return "Ipad";\n        if (obj.iphoneOs) return "Iphone";\n        if (obj.midp) return "Midp";\n        if (obj.uc7 || obj.uc) return "Uc browser";\n        if (obj.android) return "Android Browser";\n        if (obj.cs) return "Window CE";\n        if (obj.winphone) return "Window Moblie";\n    };\n    var mobile = _fn();\n    if (mobile) {\n        ret = mobile;\n\n        ret.pc = false;\n        ret.mob = true;\n        ret.iosversion = _iosfn();\n        ret.androidversion = _android();\n        if (ret.isweixin) {\n            ret.weixin_version = _weixin_version();\n        }\n    } else {\n        var nav = navigator.userAgent.toLowerCase();\n        var pc = {};\n        pc.version = 0;\n        pc.moz = /firefox/.test(nav);\n        pc.webkit = /webkit/.test(nav);\n        pc.opera = /opera/.test(nav);\n        pc.safari = /safari/.test(nav);\n        if (pc.moz) {\n            pc.version = _versionfn(/firefox\\/([\\d.]+)/);\n        } else if (pc.webkit) {\n            pc.version = _versionfn(/chrome\\/([\\d.]+)/);\n        } else if (pc.opera) {\n            pc.version = _versionfn(/opera\\/([\\d.]+)/);\n        }\n        pc.ie = /msie/.test(nav);\n        pc.ie11 = false;\n        pc.ie10 = false;\n        pc.ie9 = false;\n        pc.ie8 = false;\n        pc.ie7 = false;\n        pc.ie6 = false;\n        pc.ie5 = false;\n        if (pc.ie) {\n            var _ver = nav.match(/msie ([\\d.]+)/)[1];\n\n            if (_ver == "11.0") pc.ie11 = true;else if (_ver == "11.0") pc.ie11 = true;else if (_ver == "10.0") pc.ie10 = true;else if (_ver == "9.0") pc.ie9 = true;else if (_ver == "8.0") pc.ie8 = true;else if (_ver == "7.0") pc.ie7 = true;else if (_ver == "6.0") pc.ie6 = true;else pc.ie5 = true;\n            var _vs = parseInt(_ver);\n            if (!isNaN(_vs)) pc.version = _vs;\n        }\n        ret = pc;\n        ret.mob = false;\n        ret.pc = true;\n        ret.version = pc.version;\n    }\n    ret.tostring = _fna(ret);\n    return ret;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _common = __webpack_require__(5);\n\nvar _common2 = _interopRequireDefault(_common);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconsole.log("这个是mian_2.js");\n\nconsole.log(_common2.default);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbl8yLmpzP2I3NTIiXSwibmFtZXMiOlsiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7Ozs7O0FBREFBLFFBQVFDLEdBQVIsQ0FBWSxjQUFaOztBQUVBRCxRQUFRQyxHQUFSIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhcIui/meS4quaYr21pYW5fMi5qc1wiKTtcclxuaW1wb3J0IEMgZnJvbSAnLi9jb21tb24nO1xyXG5jb25zb2xlLmxvZyhDKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')}]);